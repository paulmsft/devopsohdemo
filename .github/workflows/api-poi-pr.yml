name: "PR - API - POI (.NET Core)"

on:
  pull_request:
    branches:
      - main
    paths:
      - "apis/poi/**"
  workflow_dispatch:

permissions:
  issues: write
  pull-requests: write

# Set envs
env:
  DOTNET_VERSION: "3.1.x"

jobs:
  buildtest:
    name: "Build and Test"
    runs-on: ubuntu-latest
    outputs:
      test_results: ${{ steps.unittestoutput.outputs.test_results }}
      test_outcome: ${{ steps.unittestoutput.outputs.test_outcome }}
    steps:
      - uses: actions/checkout@v2

      - name: "Setup .NET Core ${{ env.DOTNET_VERSION }}"
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "Restore dependencies"
        run: dotnet restore
        working-directory: "apis/poi"

      - name: "Build the App"
        run: dotnet build --no-restore
        working-directory: "apis/poi"

      - name: "Run Unit Tests"
        id: unittest
        run: |
          dotnet test --no-build --filter "FullyQualifiedName~UnitTest" |& tee test_results.txt

          # break if 'dotnet test' failed
          test ${PIPESTATUS[0]} -eq 0
        continue-on-error: true
        working-directory: "apis/poi"

      # Create string output
      - name: Create String Output
        run: |
          RESULT=$(cat test_results.txt)
          echo "## Unit Tests Output" >> result.string
          echo "<details><summary>Click to view unit tests output</summary>" >> result.string
          echo "" >> result.string
          echo '```' >> result.string
          echo "$RESULT" >> result.string
          echo '```' >> result.string
          echo "</details>" >> result.string
          
          SUMMARY=$(cat result.string)
          SUMMARY="${SUMMARY//'%'/'%25'}"
          SUMMARY="${SUMMARY//$'\n'/'%0A'}"
          SUMMARY="${SUMMARY//$'\r'/'%0D'}"
          
          echo "::set-output name=summary::$SUMMARY"
        working-directory: "apis/poi"
          
      # Publish task summary
      - name: Publish to Task Summary
        run: |
          cat result.string >> $GITHUB_STEP_SUMMARY
        working-directory: "apis/poi"

      - name: "Transform Unit Tests output"
        id: unittestoutput
        if: steps.unittest.outcome == 'failure'
        run: |
          test_results=$(cat test_results.txt)
          test_results="${test_results//'%'/'%25'}"
          test_results="${test_results//$'\n'/'%0A'}"
          test_results="${test_results//$'\r'/'%0D'}"
          
          echo "::set-output name=test_results::${test_results}"
          echo "::set-output name=test_outcome::${{ steps.unittest.outcome }}"
        working-directory: "apis/poi"
          
      - name: "Create an issue (bug)"
        if: steps.unittest.outcome == 'failure' && github.event_name != 'pull_request'
        run: |
          body='### Unit Test `failure`
          <details>
          <summary>Workflow details</summary>

          Workflow name: `${{ github.workflow }}`
          Action: `${{ github.event_name }}`
          Job: `${{ github.job }}`
          </details>

          Test details: [Run #${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          Pusher: @${{ github.actor }}'

          title='POI Unit Tests failure'
          gh issue create --title "${title}" --body "${body}" --label bug --assignee ${{ github.actor }}
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Create a PR comment"
        uses: actions/github-script@v5.0.0
        if: steps.unittest.outcome == 'failure' && github.event_name == 'pull_request'
        env:
          UNIT_TEST_RESULTS: "${{ needs.buildtest.outputs.test_results }}"
        with:
          script: |
            const body = `#### Unit Tests \`${{ needs.buildtest.outputs.test_outcome }}\`
            <details>
            <summary>Details</summary>\n
            \`\`\`
            ${process.env.UNIT_TEST_RESULTS}
            \`\`\`\n
            </details>\n
            Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\``;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            })
            
      # break the workflow
      - name: "Fail workflow"
        if: steps.unittest.outcome == 'failure' && github.event_name == 'pull_request'
        run: exit 1
